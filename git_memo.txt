<?php
/*

将ssh配置到GitHub中
进入生成的ssh目录 : C:\Documents and Settings\Administrator\.ssh 
（或者 C:\Users\自己电脑用户名\.ssh）中, 使用记事本打开 id_rsa.pub 文件, 将该文件中的内容复制;

1.基础操作：
生成新的密钥：
Ssh-keygen –t rsa –C “defnngj@gmai.com” 

$ ssh –T git@github.com
如果提示：Hi defnngj You've successfully authenticated, but GitHub does not provide shell access. 说明你连接成功了。

$ git remote add origin git@github.com:defnngj/hibernate-demo.git
//如果你是第一次提交项目，这一句非常重要，这是你本地的当前的项目与远程的哪个仓库建立连接。

$ git clone git@github.com:defnngj/hibernate-demo.git  //在git下面切换到想存放此项目的文件目录下，运行这条命令就可以将项目克隆下来。
假如本地已经存在了这个项目，而仓库中又有一新的更新，如何把更的合并到本地的项目中？
$ git fetch origin    //取得远程更新，这里可以看做是准备要取了
$ git merge origin/master  //把更新的内容合并到本地分支/master

*******
删除github上文件的
If you deleted a file from the working tree, then commit the deletion:

git commit -a -m "A file was deleted"
And push your commit upstream:

git push

****1***
假如你现在新创建了一个项目，想把它提交到github上面？
假设你创建好了一个项目，并切换到项目的根目录下面：
$ git status   //查看当前项目下所有文的状态，如果第一次，你会发现都红颜色的，因为它还没有交给git/github管理。
$ git add .   //（.）点表示当前目录下的所有内容，交给git管理，也就是提交到了git的本地仓库。
Ps:git的强大之处就是有一个本地仓库的概念，在没有网络的情况下可以先将更新的内容提交到本地仓库。
$ git commit –m”new natter ”  //对你更新或修改了哪些内容做一个描述。
$ git remote add origin git@github.com:defnngj/hibernate-demo.git
//如果你是第一次提交项目，这一句非常重要，这是你本地的当前的项目与远程的哪个仓库建立连接。
Ps: origin可以改为别人的名字，但是在你下一次push（提交）时，也要用你修改之后的名字。
$ git remote -v  //查看你当前项目远程连接的是哪个仓库地址。
$ git push -u origin master  //将本地的项目提交到远程仓库中。


******2***
*假如，你回到了家，想把公司提交的项目克隆到本地？
 
如果你是第一次想把github上面的项目克隆到本地或者要克隆别人的项目到地。
$ git clone git@github.com:defnngj/hibernate-demo.git  //在git下面切换到想存放此项目的文件目录下，运行这条命令就可以将项目克隆下来。
假如本地已经存在了这个项目，而仓库中又有一新的更新，如何把更的合并到本地的项目中？
$ git fetch origin    //取得远程更新，这里可以看做是准备要取了
$ git merge origin/master  //把更新的内容合并到本地分支/master


****3***
*项目中删除了一些文件，如何提交？

假如远程仓库中已经存了aaa这个文件，我fetch了下来，并删除了aaa这个文件，想再push上到远程仓库中，并使远程仓库中的项目被新的修改覆盖（也是是远程仓库中的aaa也被删除）
$ git status   //可以看到我们删除的哪些文件
$ git add .   //删除之后的文件提交git管理。
$ git rm   src/com/hzh/hibernate/dao/aaa.java    //移除我们删除的那个文件，不然git不允许我们往远程仓库提交。
Ps: 如果你想删除的是某个目录（java包），这里想移除整个目录的内容。
$ git rm  src/com/hzh/hibernate/bbb/ -r   // -r 会把bbb/目录下的所有内容一次性移动。

****4***
*远程创建了一个新仓库，本地创建了一个新项目，如何使新的项目与仓库对应起来？

其实，这个也很简单，只是我当时对那些命令不太理解，所以比较模糊，不知如何对应。
$ git remote add origin git@github.com:defnngj/hibernate-demo.git
//还是这个命令，在你push项目之前加上这一句就OK了。
git@github.com:defnngj/hibernate-demo.git 就是你常见的新仓库的地址啊。git切换到新项目下，在push之前，加上这一句，我们创建的新仓库就与新项目建立了连接。

2.删除：
git如何恢复本地删除的文件  git ls-files -d | xargs -i git checkout {}

3.错误提示

4.分支
（1）创建分支
git branch "name"
git checkout -b "name"
git checkout -b feature-x develop

（2）查看本地分支
git branch

（3）查看远程分支
git branch -a

(4)把分支推到远程分支 
git push origin name

(5)切换分支
git checkout "name"

(6)删除本地分支
git branck -d name

（7）删除远程分支
git push origin :name

（8）合并分支
切换到master
# 对Develop分支进行合并
　　git merge --no-ff develop
命令的--no-ff参数 是指比避免快速合并版本记录
可以保留develop下的版本过程

**************
删除已提交的索引
三、git add -u
git add -u 表示 add to index only files modified or deleted and not those created 
git add -u []: 把中所有tracked文件中被修改过或已删除文件的信息添加到索引库。它不会处理untracted的文件。
省略表示.,即当前目录。
四、git add -A
git add -A: []表示把中所有tracked文件中被修改过或已删除文件和所有untracted的文件信息添加到索引库。
省略表示.,即当前目录。
五、git add -i
我们可以通过git add -i []命令查看中被所有修改过或已删除文件但没有提交的文件，
并通过其revert子命令可以查看中所有untracted的文件，同时进入一个子命令系统。
*******************

添加标签
*******
列出git中现有标签
git tag
当然，你也可以按照特定表达式搜索某些标签。假如在一个 git 仓库中有超过 240 个标签，而你只想得到 1.4.2 序列的标签，那么你可以：
$ git tag -l v1.4.2.*
v1.4.2.1
v1.4.2.2
创建标签
在 git 中有两种最主要的标签–轻量级标签（lightweight）和带注释的标签（annotated）。轻量级标签跟分枝一样，不会改变。它就是针对某个特定提交的指针。然而，带注释的标签是git仓库中的对象。它是一组校验和，包含标签名、email、日期，标签信息，GPG签名和验证。一般情况下，建议创建带注释的标签，这样就会保留这些信息，但是如果你只是需要临时性标签或者某些原因你不想在标签中附带上面说的这些信息，lightweight标签更合适些。
带注释的标签
在git中创建带注释的标签非常简单，在运行’tag’命令时加上-a就可以了。
$ git tag -a v1.4 -m ‘version 1.4′

共享标签
默认情况下，’git push’命令不会将标签上传到远程服务器上。为了共享这些标签，你必须在’git push’命令后明确添加-tags选项
[master]$ git push –tags
Counting objects: 50, done.
******


*********
Git中从远程的分支获取最新的版本到本地有这样2个命令：
1. git fetch：相当于是从远程获取最新版本到本地，不会自动merge
    
git fetch origin master
git log -p master..origin/master
git merge origin/master

    以上命令的含义：
   首先从远程的origin的master主分支下载最新的版本到origin/master分支上
   然后比较本地的master分支和origin/master分支的差别
   最后进行合并
   上述过程其实可以用以下更清晰的方式来进行：
 git fetch origin master:tmp
git diff tmp 
git merge tmp

    从远程获取最新的版本到本地的test分支上
   之后再进行比较合并
2. git pull：相当于是从远程获取最新版本并merge到本地
 git pull origin master

上述命令其实相当于git fetch 和 git merge
在实际使用中，git fetch更安全一些
因为在merge前，我们可以查看更新情况，然后再决定是否合并
结束

*****

Git下的冲突解决
逻辑冲突

git自动处理（合并/应用补丁）成功，但是逻辑上是有问题的。
比如另外一个人修改了文件名，但我还使用老的文件名，这种情况下自动处理是能成功的，但实际上是有问题的。
又比如，函数返回值含义变化，但我还使用老的含义，这种情况自动处理成功，但可能隐藏着重大BUG。这种问题，主要通过自动化测试来保障。所以最好是能够写出比较完备的自动化测试用例。
这种冲突的解决，就是做一次BUG修正。不是真正解决git报告的冲突。

****

内容冲突

两个用户修改了同一个文件的同一块区域，git会报告内容冲突。我们常见的都是这种，后面的解决办法也主要针对这种冲突。

*****
树冲突

文件名修改造成的冲突，称为树冲突。
比如，a用户把文件改名为a.c，b用户把同一个文件改名为b.c，那么b将这两个commit合并时，会产生冲突。
$ git status
    added by us:    b.c
    both deleted:   origin-name.c
    added by them:  a.c

如果最终确定用b.c，那么解决办法如下：
git rm a.c
git rm origin-name.c
git add b.c
git commit
****************************


发现冲突

一般来讲，出现冲突时都会有“CONFLICT”字样：
$ git pull
Auto-merging test.txt
CONFLICT (content): Merge conflict in test.txt
Automatic merge failed; fix conflicts and then commit the result.

但是，也有例外，repo sync的报错，可能并不是直接提示冲突，而是下面这样：
error: project mini/sample
注：无论是否存在冲突，只要本地修改不是基于服务器最新的，它都可能报告这个错误，解决方法都是一样。

这个时候，需要进入报错的项目（git库）目录，然后执行git rebase解决：
git rebase remote-branch-name

*********

rebase的冲突解决

rebase的冲突解决过程，就是解决每个应用补丁冲突的过程。
解决完一个补丁应用的冲突后，执行下面命令标记冲突已解决（也就是把修改内容加入缓存）：
git add -u
注：-u 表示把所有已track的文件的新的修改加入缓存，但不加入新的文件。
 
然后执行下面命令继续rebase：
git rebase --continue
有冲突继续解决，重复这这些步骤，直到rebase完成。
 
如果中间遇到某个补丁不需要应用，可以用下面命令忽略：
git rebase --skip
 
如果想回到rebase执行之前的状态，可以执行：
git rebase --abort
 
注：rebase之后，不需要执行commit，也不存在新的修改需要提交，都是git自动完成。

******


 */
?>